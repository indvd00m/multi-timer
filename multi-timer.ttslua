-- MultiTimer - chessclock-like timer for two or more players

-- constants
version = '1.3.0-dev'
url = 'https://github.com/indvd00m/multi-timer'
mainColor = {102/255, 102/255, 255/255}
enabledColor = {0/255, 204/255, 102/255}
disabledColor = {153/255, 153/255, 153/255}
defaultButtonColor = {255/255, 255/255, 255/255}
undefinedTimerColorValue = ''
firstCurrentTimerButtonIndex = 10
turnsColors = {
    White       = {1, 1, 1},
    Brown       = {0.443, 0.231, 0.09},
    Red         = {0.856, 0.1, 0.094},
    Orange      = {0.956, 0.392, 0.113},
    Yellow      = {0.905, 0.898, 0.172},
    Green       = {0.192, 0.701, 0.168},
    Teal        = {0.129, 0.694, 0.607},
    Blue        = {0.118, 0.53, 1},
    Purple      = {0.627, 0.125, 0.941},
    Pink        = {0.96, 0.439, 0.807},
    Grey        = {0.5, 0.5, 0.5},
    Black       = {0.25, 0.25, 0.25}
}
maxPlayerNameLength = 9

-- variables
isActive = false
isTurns = false
timerLimit = 60 * 30
timerIncrement = 30
timersList = {}
timerTemplate = {
    currentSeconds = 0,
    lastSeconds = 0,
    color = undefinedTimerColorValue,
}
currentTimerIndex = 0

-- code
function onSave()
    local persistence = {
        isActive = isActive,
        isTurns = isTurns,
        timerLimit = timerLimit,
        timerIncrement = timerIncrement,
        timersList = timersList,
        timerTemplate = timerTemplate,
        currentTimerIndex = currentTimerIndex,
        clock = os.clock(),
    }
    local json = JSON.encode(persistence)
    return json
end

function onLoad(savedState)
    if savedState ~= nil and savedState ~= "" then
        local persistence = JSON.decode(savedState)
        isActive = persistence.isActive
        isTurns = persistence.isTurns
        timerLimit = persistence.timerLimit
        timerIncrement = persistence.timerIncrement
        timersList = persistence.timersList
        timerTemplate = persistence.timerTemplate
        currentTimerIndex = persistence.currentTimerIndex
        local clockDiff = persistence.clock - os.clock()
        for index, timer in pairs(timersList) do
            timer.lastSeconds = timer.lastSeconds - clockDiff
            if timer.lastSeconds < 0 then
                timer.lastSeconds = 0
            end
        end
        updateForBackwardCompatibility()
    else
        addTimer()
    end

    createButtons()
    updateView()
    updateActiveView()
    updateTurnsView()
    updateCurrentTurnView()

    self.setName('MultiTimer')
    self.setDescription('MultiTimer is a chessclock-like timer for two or more players. Version ' .. version .. '. \n\n' .. url)
    self.setColorTint(mainColor)
end

function updateForBackwardCompatibility()
    -- 1.2.0 changes
    if isTurns == nil then
        isTurns = false
    end
    for index, timer in pairs(timersList) do
        if timer['color'] == nil then
            timer['color'] = undefinedTimerColorValue
        end
    end
    if timerTemplate['color'] == nil then
        timerTemplate['color'] = undefinedTimerColorValue
    end
end

function onUpdate()
    updateTimerSeconds(timersList[currentTimerIndex])
    updateView()
end

function updateTimerSeconds(timer)
    if isActive then
        local currentSecondsValue = os.clock()
        if timer.lastSeconds == 0 then
            timer.lastSeconds = currentSecondsValue
        end
        local diff = currentSecondsValue - timer.lastSeconds
        timer.lastSeconds = currentSecondsValue
        timer.currentSeconds = timer.currentSeconds + diff
    end
end

function updateView()
    local seconds = timerLimit - timersList[currentTimerIndex].currentSeconds
    local sign = ''
    if seconds < 0 then
        seconds = math.abs(seconds)
        sign = '-'
    end
    local playerName = getPlayerName(currentTimerIndex)
    if string.len(playerName) > maxPlayerNameLength then
        playerName = string.sub(playerName, 1, maxPlayerNameLength)
    end
    local timerString = playerName .. '\n' .. sign .. formatSeconds(seconds)
    local prevString = self.getButtons()[firstCurrentTimerButtonIndex].label
    if timerString ~= prevString then
        for i = 0, 3 do
            self.editButton({
                index          = firstCurrentTimerButtonIndex + i - 1,
                label          = timerString
            })
        end
    end
end

function getPlayerName(timerIndex)
    if isTurns then
        local color = timersList[timerIndex].color
        if color ~= undefinedTimerColorValue then
            local player = Player[color]
            if player ~= nil and player.steam_name ~= nil then
                return player.steam_name
            end
        end
    end
    return 'Player ' .. timerIndex
end

function formatSeconds(seconds)
    local hours = math.floor(seconds / (60 * 60))
    local minutes = math.floor(seconds % (60 * 60) / 60)
    seconds = seconds % 60
    return string.format("%02d:%02d:%02d", hours, minutes, seconds)
end

function showText(text)
    if isTurns then
        broadcastToAll(text, mainColor)
    end
end

function toggleTimer()
    if isActive then
        pauseTimer()
    else
        startTimer()
    end
end

function startTimer()
    if isActive == false then
        timersList[currentTimerIndex].lastSeconds = os.clock()
        isActive = true
        updateView()
        updateActiveView()
        print('Timer started')
        showText('Timer started')
    end
end

function pauseTimer()
    if isActive == true then
        isActive = false
        updateView()
        updateActiveView()
        print('Timers paused')
        showText('Timers paused')
    end
end

function updateActiveView()
    if isActive then
        self.editButton({
            index          = 0,
            label          = 'Pause',
            color          = enabledColor,
        })
    else
        self.editButton({
            index          = 0,
            label          = 'Start',
            color          = disabledColor,
        })
    end
end

function toggleTurns()
    if isTurns then
        disableTurns()
    else
        enableTurns()
    end
end

function enableTurns()
    if isTurns == false then
        isTurns = true
        updateTurnsView()
        updateCurrentTurnView()
        print('\z
            Turns and colors binding enabled. For binding color to timer first select timer, \z
            then change player color. Current timer will be binded to player which selected color. \z
            Now timer will be automatically changed when turn is changed. You can change \z
            current timer manually also. \z
        ')
        showText('Turns and Colors enabled. See chat for more information.')
    end
end

function disableTurns()
    if isTurns == true then
        showText('Turns disabled')
        isTurns = false
        updateTurnsView()
        updateCurrentTurnView()
        print('Turns disabled')
    end
end

function updateTurnsView()
    if isTurns then
        self.editButton({
            index          = 1,
            color          = enabledColor,
        })
    else
        self.editButton({
            index          = 1,
            color          = disabledColor,
        })
    end
end

function resetTimers()
    for index, timer in pairs(timersList) do
        resetTimer(timer)
    end

    updateView()
    print('All timers reseted')
    showText('All timers reseted')
end

function resetTimer(timer)
    timer.currentSeconds = 0
end

function nextTimer()
    local nextIndex = currentTimerIndex + 1
    local length = length(timersList)
    if nextIndex > length or nextIndex < 1 then
        nextIndex = 1
    end
    setCurrentTimer(nextIndex)
end

function setCurrentTimer(index)
    local length = length(timersList)
    if index > length or index < 1 then
        print('Incorrect timer index: ' .. index)
        return
    end
    currentTimerIndex = index
    if isActive then
        timersList[currentTimerIndex].lastSeconds = os.clock()
    end
    updateView()
    updateCurrentTurnView()
    local playerName = getPlayerName(currentTimerIndex)
    print('Current timer: ' .. playerName .. ' (' .. currentTimerIndex .. ' from ' .. length .. ')')
    showText('Current timer: ' .. playerName)
end

function addTimer()
    local nextIndex = length(timersList) + 1
    local newTimer = clone(timerTemplate);
    timersList[nextIndex] = newTimer
    print('Timer added. Timers count: ' .. nextIndex)
    showText('Timer added. Timers count: ' .. nextIndex)
    setCurrentTimer(nextIndex)
end

function removeTimer()
    local length = length(timersList)
    if length > 1 then
        local newTimersList = {}
        local nextIndex = 0
        for index, timer in pairs(timersList) do
            if index != currentTimerIndex then
                nextIndex = nextIndex + 1
                newTimersList[nextIndex] = timer
            end
        end
        timersList = newTimersList
        print('Timer removed. Timers count: ' .. nextIndex)
        showText('Timer removed. Timers count: ' .. nextIndex)
        if currentTimerIndex == length then
            currentTimerIndex = currentTimerIndex - 2
        else
            currentTimerIndex = currentTimerIndex - 1
        end
        nextTimer()
    else
        print('Removing of last timer is deprecated')
        showText('Removing of last timer is deprecated')
    end
end

function increaseLimit()
    timerLimit = timerLimit + timerIncrement
    print('All timers increased at ' .. formatSeconds(timerIncrement))
end

function decreaseLimit()
    if timerLimit > timerIncrement then
        timerLimit = timerLimit - timerIncrement
        print('All timers decreased at ' .. formatSeconds(timerIncrement))
    else
        print('Timers already decreased until the end ')
    end
end

function increaseCurrentTime()
    local timer = timersList[currentTimerIndex]
    local playerName = getPlayerName(currentTimerIndex)
    if timer.currentSeconds > timerIncrement then
        timer.currentSeconds = timer.currentSeconds - timerIncrement
        print('Timer of ' .. playerName .. ' increased at ' .. formatSeconds(timerIncrement))
    else
        timer.currentSeconds = 0
        print('Timer of ' .. playerName .. ' already increased to maximum')
    end
end

function decreaseCurrentTime()
    local timer = timersList[currentTimerIndex]
    local playerName = getPlayerName(currentTimerIndex)
    timer.currentSeconds = timer.currentSeconds + timerIncrement
    print('Timer of ' .. playerName .. ' decreased at ' .. formatSeconds(timerIncrement))
end

function updateCurrentTurnView()
    if isTurns then
        local colorValue = defaultButtonColor
        local color = timersList[currentTimerIndex].color
        if color ~= undefinedTimerColorValue then
            colorValue = turnsColors[color]
        end
        if colorValue == nil then
            colorValue = defaultButtonColor
        end
        for i = 0, 3 do
            self.editButton({
                index          = firstCurrentTimerButtonIndex + i - 1,
                color          = colorValue
            })
        end
    else
        for i = 0, 3 do
            self.editButton({
                index          = firstCurrentTimerButtonIndex + i - 1,
                color          = defaultButtonColor
            })
        end
    end
end

function onPlayerChangeColor(color)
    if isTurns == false then
        return
    end

    if color == nil then
        -- unknown
        return
    elseif color == undefinedTimerColorValue then
        -- undefined
        return
    elseif color == 'Grey' then
        -- spectator
        return
    elseif color == 'Black' then
        -- master
        return
    end
    for index, timer in pairs(timersList) do
        if index ~= currentTimerIndex then
            if timer.color == color then
                timer.color = undefinedTimerColorValue
                local playerName = getPlayerName(index)
                print(playerName .. ': current color reseted')
                showText(playerName .. ': current color reseted')
            end
        end
    end
    timersList[currentTimerIndex].color = color
    updateCurrentTurnView()
    local playerName = getPlayerName(currentTimerIndex)
    print(playerName .. ': current color binded')
    showText(playerName .. ': current color binded')
end

function onPlayerTurnEnd(colorEnd, colorNext)
    if isTurns == false then
        return
    end
    if isActive == false then
        return
    end

    local needStop = false
    if colorNext == nil then
        -- unknown
        needStop = true
    elseif colorNext == undefinedTimerColorValue then
        -- undefined
        needStop = true
    elseif colorNext == 'Grey' then
        -- spectator
        needStop = true
    elseif colorNext == 'Black' then
        -- master
        needStop = true
    else
        for index, timer in pairs(timersList) do
            if timer.color == colorNext then
                needStop = false
                break
            else
                needStop = true
            end
        end
    end

    if needStop then
        pauseTimer()
        local playerName = getPlayerName(currentTimerIndex)
        print(playerName .. ': current timer paused because of timer with next color ' .. colorNext .. ' is not exists')
        showText(playerName .. ': current timer paused because of timer with next color ' .. colorNext .. ' is not exists')
    end
end

function onPlayerTurnStart(startColor, prevColor)
    if isTurns == false then
        return
    end

    if startColor == nil then
        -- unknown
        return
    elseif startColor == undefinedTimerColorValue then
        -- undefined
        return
    elseif startColor == 'Grey' then
        -- spectator
        return
    elseif startColor == 'Black' then
        -- master
        return
    end
    local startIndex = nil
    for index, timer in pairs(timersList) do
        if timer.color == startColor then
            startIndex = index
            break
        end
    end
    if startIndex ~= nil then
        setCurrentTimer(startIndex)
    else
        print('Can\'t find timer with color ' .. startColor)
        showText('Can\'t find timer with color ' .. startColor)
    end
end

function length(table)
    local count = 0
    for _ in pairs(table) do
        count = count + 1
    end
    return count
end

function clone (t) -- deep-copy a table
    if type(t) ~= "table" then return t end
    local meta = getmetatable(t)
    local target = {}
    for k, v in pairs(t) do
        if type(v) == "table" then
            target[k] = clone(v)
        else
            target[k] = v
        end
    end
    setmetatable(target, meta)
    return target
end

function createButtons()
    self.createButton({
        click_function = 'toggleTimer',
        function_owner = self,
        label          = 'Start',
        position       = {0.3, 0.5, 0.3},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Start or pause current timer',
    })
    self.createButton({
        click_function = 'toggleTurns',
        function_owner = self,
        label          = 'Turns',
        position       = {0.3, 0.5, 0},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Enable or disable auto-binding to Turns and Colors',
    })
    self.createButton({
        click_function = 'resetTimers',
        function_owner = self,
        label          = 'Reset',
        position       = {0.3, 0.5, -0.3},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Reset all timers',
    })
    self.createButton({
        click_function = 'decreaseLimit',
        function_owner = self,
        label          = '--',
        position       = {0, 0.5, 0.3},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Decrease upper limit of all timers at ' .. timerIncrement .. ' seconds',
    })
    self.createButton({
        click_function = 'increaseLimit',
        function_owner = self,
        label          = '++',
        position       = {-0.3, 0.5, 0.3},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Increase upper limit of all timers at ' .. timerIncrement .. ' seconds',
    })
    self.createButton({
        click_function = 'decreaseCurrentTime',
        function_owner = self,
        label          = '-',
        position       = {0, 0.5, 0},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Decrease current timer at ' .. timerIncrement .. ' seconds',
    })
    self.createButton({
        click_function = 'increaseCurrentTime',
        function_owner = self,
        label          = '+',
        position       = {-0.3, 0.5, 0},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Increase current timer at ' .. timerIncrement .. ' seconds',
    })
    self.createButton({
        click_function = 'removeTimer',
        function_owner = self,
        label          = 'Remove',
        position       = {0, 0.5, -0.3},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Remove current timer',
    })
    self.createButton({
        click_function = 'addTimer',
        function_owner = self,
        label          = 'Add',
        position       = {-0.3, 0.5, -0.3},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Add new timer',
    })

    -- player buttons
    self.createButton({
        click_function = 'nextTimer',
        function_owner = self,
        label          = '00:00:00',
        position       = {0, 0, -0.5},
        rotation       = {90, 180, 0},
        -- scale          = -- Vector,
        width          = 450,
        height         = 300,
        font_size      = 100,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Next timer',
    })
    self.createButton({
        click_function = 'nextTimer',
        function_owner = self,
        label          = '00:00:00',
        position       = {0, 0, 0.5},
        rotation       = {-90, 0, 0},
        -- scale          = -- Vector,
        width          = 450,
        height         = 300,
        font_size      = 100,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Next timer',
    })
    self.createButton({
        click_function = 'nextTimer',
        function_owner = self,
        label          = '00:00:00',
        position       = {-0.5, 0, 0},
        rotation       = {0, 90, -90},
        -- scale          = -- Vector,
        width          = 450,
        height         = 300,
        font_size      = 100,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Next timer',
    })
    self.createButton({
        click_function = 'nextTimer',
        function_owner = self,
        label          = '00:00:00',
        position       = {0.5, 0, 0},
        rotation       = {0, -90, 90},
        -- scale          = -- Vector,
        width          = 450,
        height         = 300,
        font_size      = 100,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Next timer',
    })
end
