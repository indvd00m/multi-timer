-- MultiTimer - chessclock-like timer for two or more players

-- constants
version = '1.3.1'
url = 'https://github.com/indvd00m/multi-timer'
mainColor = {102/255, 102/255, 255/255}
enabledColor = {0/255, 204/255, 102/255}
disabledColor = {153/255, 153/255, 153/255}
defaultButtonColor = {255/255, 255/255, 255/255}
undefinedTimerColorValue = ''
startButtonIndex = 0
turnsButtonIndex = 6
selectTimerColorButtonIndex = 8
bindTimerToColorButtonIndex = 9
resetTimersButtonIndex = 10
firstCurrentTimerButtonIndex = 13
turnsColors = {
    White       = {1, 1, 1},
    Brown       = {0.443, 0.231, 0.09},
    Red         = {0.856, 0.1, 0.094},
    Orange      = {0.956, 0.392, 0.113},
    Yellow      = {0.905, 0.898, 0.172},
    Green       = {0.192, 0.701, 0.168},
    Teal        = {0.129, 0.694, 0.607},
    Blue        = {0.118, 0.53, 1},
    Purple      = {0.627, 0.125, 0.941},
    Pink        = {0.96, 0.439, 0.807},
    Grey        = {0.5, 0.5, 0.5},
    Black       = {0.25, 0.25, 0.25}
}
maxPlayerNameLengthForNextTimer = 9
maxPlayerNameLengthForSelect = 8

-- variables
isActive = false
isTurns = false
timerLimit = 60 * 30
timerIncrement = 60
timersList = {}
timerTemplate = {
    currentSeconds = 0,
    lastSeconds = 0,
    color = undefinedTimerColorValue,
}
currentTimerIndex = 0
selectedTimerColor = nil

-- code
function onSave()
    local persistence = {
        isActive = isActive,
        isTurns = isTurns,
        timerLimit = timerLimit,
        timerIncrement = timerIncrement,
        timersList = timersList,
        timerTemplate = timerTemplate,
        currentTimerIndex = currentTimerIndex,
        selectedTimerColor = selectedTimerColor,
        clock = os.clock(),
    }
    local json = JSON.encode(persistence)
    return json
end

function onLoad(savedState)
    if savedState ~= nil and savedState ~= '' then
        local persistence = JSON.decode(savedState)
        isActive = persistence.isActive
        isTurns = persistence.isTurns
        timerLimit = persistence.timerLimit
        timerIncrement = persistence.timerIncrement
        timersList = persistence.timersList
        timerTemplate = persistence.timerTemplate
        currentTimerIndex = persistence.currentTimerIndex
        selectedTimerColor = persistence.selectedTimerColor
        local clockDiff = persistence.clock - os.clock()
        for index, timer in pairs(timersList) do
            timer.lastSeconds = timer.lastSeconds - clockDiff
            if timer.lastSeconds < 0 then
                timer.lastSeconds = 0
            end
        end
        updateForBackwardCompatibility()
    else
        addTimer()
    end

    createButtons()
    updateView()
    updateActiveView()
    updateTurnsView()
    updateCurrentTurnView()
    updateSelectTimerColorView()

    self.setName('MultiTimer')
    self.setDescription('MultiTimer is a chessclock-like timer for two or more players. Version ' ..
            version .. '. \n\n' .. url)
    self.setColorTint(mainColor)
end

function updateForBackwardCompatibility()
    -- 1.2.0 changes
    if isTurns == nil then
        isTurns = false
    end
    for index, timer in pairs(timersList) do
        if timer['color'] == nil then
            timer['color'] = undefinedTimerColorValue
        end
    end
    if timerTemplate['color'] == nil then
        timerTemplate['color'] = undefinedTimerColorValue
    end

    -- 1.3.0 changes
    if timerIncrement == 30 then
        timerIncrement = 60
    end
    if getPlayerNameByColor(selectedTimerColor) == nil then
        selectedTimerColor = nil
    end
end

function onUpdate()
    updateTimerSeconds(timersList[currentTimerIndex])
    updateView()
end

function updateTimerSeconds(timer)
    if isActive then
        local currentSecondsValue = os.clock()
        if timer.lastSeconds == 0 then
            timer.lastSeconds = currentSecondsValue
        end
        local diff = currentSecondsValue - timer.lastSeconds
        timer.lastSeconds = currentSecondsValue
        timer.currentSeconds = timer.currentSeconds + diff
    end
end

function updateView()
    local seconds = getTimerSecondsHumanReadeable(timersList[currentTimerIndex])
    local sign = ''
    if seconds < 0 then
        seconds = math.abs(seconds)
        sign = '-'
    end
    local playerName = getPlayerNameByTimerIndex(currentTimerIndex)
    if string.len(playerName) > maxPlayerNameLengthForNextTimer then
        playerName = string.sub(playerName, 1, maxPlayerNameLengthForNextTimer)
    end
    local timerString = playerName .. '\n' .. sign .. formatSeconds(seconds)
    local prevString = self.getButtons()[firstCurrentTimerButtonIndex].label
    if timerString ~= prevString then
        for i = 0, 3 do
            self.editButton({
                index          = firstCurrentTimerButtonIndex + i - 1,
                label          = timerString
            })
        end
    end
end

function getTimerSecondsHumanReadeable(timer)
    local seconds = timerLimit - timer.currentSeconds
    return seconds;
end

function getPlayerNameByTimerIndex(timerIndex)
    if isTurns then
        local color = timersList[timerIndex].color
        if color ~= undefinedTimerColorValue then
            local playerName = getPlayerNameByColor(color)
            if playerName ~= nil then
                return playerName
            end
        end
    end
    return 'Player ' .. timerIndex
end

function getPlayerNameByColor(color)
    if color == nil then
        return nil
    end
    local player = Player[color]
    if player ~= nil and player.steam_name ~= nil then
        return player.steam_name
    else
        return nil
    end
end

function formatSeconds(seconds)
    local hours = math.floor(seconds / (60 * 60))
    local minutes = math.floor(seconds % (60 * 60) / 60)
    seconds = seconds % 60
    return string.format('%02d:%02d:%02d', hours, minutes, seconds)
end

function showText(text)
    if isTurns then
        broadcastToAll(text, mainColor)
    else
        chatText(text, mainColor)
    end
end

function chatText(text, color)
    if color == nil then
        color = mainColor
    end
    printToAll(text, color)
end

function toggleTimer()
    if isActive then
        pauseTimer()
    else
        startTimer()
    end
end

function startTimer()
    if isActive == false then
        timersList[currentTimerIndex].lastSeconds = os.clock()
        isActive = true
        updateView()
        updateActiveView()
        showText('Timer started')
    end
end

function pauseTimer()
    if isActive == true then
        isActive = false
        updateView()
        updateActiveView()
        showText('Timer paused')
    end
end

function updateActiveView()
    if isActive then
        self.editButton({
            index          = startButtonIndex,
            label          = 'Pause',
            color          = enabledColor,
        })
    else
        self.editButton({
            index          = startButtonIndex,
            label          = 'Start',
            color          = disabledColor,
        })
    end
end

function toggleTurns()
    if isTurns then
        disableTurns()
    else
        enableTurns()
    end
end

function enableTurns()
    if isTurns == false then
        isTurns = true
        updateTurnsView()
        updateCurrentTurnView()
        updateSelectTimerColorView()
        showText('Turns and Colors enabled. See chat for more information.')
        chatText('\z
            Turns and colors binding enabled. For binding timer to any player first select timer, \z
            then repeatedly press button Select to select player and then press button Bind to bind \z
            current timer to selected player. Now timer will be automatically changed when turn is \z
            changed. You can change current timer manually also. \z
        ', turnsColors['White'])
    end
end

function disableTurns()
    if isTurns == true then
        isTurns = false
        selectedTimerColor = nil
        updateTurnsView()
        updateCurrentTurnView()
        updateSelectTimerColorView()
        showText('Turns disabled')
    end
end

function updateTurnsView()
    if isTurns then
        self.editButton({
            index          = turnsButtonIndex,
            color          = enabledColor,
        })
    else
        self.editButton({
            index          = turnsButtonIndex,
            color          = disabledColor,
        })
    end
end

function resetTimers()
    showText('Reseting all timers')
    for index, timer in pairs(timersList) do
        local playerName = getPlayerNameByTimerIndex(index)
        local seconds = getTimerSecondsHumanReadeable(timer)
        chatText(playerName .. ': timer value before reseting: ' .. formatSeconds(seconds))
        resetTimer(timer)
    end

    updateView()
    local seconds = formatSeconds(timerLimit)
    showText('All timers reseted to ' .. seconds)
end

function resetTimer(timer)
    timer.currentSeconds = 0
end

function nextTimer()
    local nextIndex = currentTimerIndex + 1
    local length = length(timersList)
    if nextIndex > length or nextIndex < 1 then
        nextIndex = 1
    end
    setCurrentTimer(nextIndex)
end

function setCurrentTimer(index)
    local length = length(timersList)
    if index > length or index < 1 then
        log('Incorrect timer index: ' .. index)
        return
    end
    currentTimerIndex = index
    if isActive then
        timersList[currentTimerIndex].lastSeconds = os.clock()
    end
    updateView()
    updateCurrentTurnView()
    updateSelectTimerColorView()
    local playerName = getPlayerNameByTimerIndex(currentTimerIndex)
    log('Current timer: ' .. playerName .. ' (' .. currentTimerIndex .. ' from ' .. length .. ')')
    showText('Current timer: ' .. playerName)
end

function addTimer()
    local nextIndex = length(timersList) + 1
    local newTimer = clone(timerTemplate);
    timersList[nextIndex] = newTimer
    showText('Timer added. Timers count: ' .. nextIndex)
    setCurrentTimer(nextIndex)
end

function removeTimer()
    local length = length(timersList)
    if length > 1 then
        local removePlayerName = getPlayerNameByTimerIndex(currentTimerIndex)
        local removeSeconds = formatSeconds(getTimerSecondsHumanReadeable(timersList[currentTimerIndex]))

        local newTimersList = {}
        local nextIndex = 0
        for index, timer in pairs(timersList) do
            if index ~= currentTimerIndex then
                nextIndex = nextIndex + 1
                newTimersList[nextIndex] = timer
            end
        end
        timersList = newTimersList
        showText(string.format('Timer #%d for player %s with value %s removed. Timers count: %d.', currentTimerIndex,
            removePlayerName, removeSeconds, nextIndex))
        if currentTimerIndex == length then
            currentTimerIndex = currentTimerIndex - 2
        else
            currentTimerIndex = currentTimerIndex - 1
        end
        nextTimer()
    else
        showText('Removing of last timer is deprecated')
    end
end

function increaseLimit()
    timerLimit = timerLimit + timerIncrement
    chatText('All timers increased at ' .. formatSeconds(timerIncrement))
    updateResetTimerView()
end

function decreaseLimit()
    if timerLimit > timerIncrement then
        timerLimit = timerLimit - timerIncrement
        chatText('All timers decreased at ' .. formatSeconds(timerIncrement))
    else
        chatText('Timers already decreased until the end')
    end
    updateResetTimerView()
end

function updateResetTimerView()
    local tooltip = 'Reset all timers to ' .. formatSeconds(timerLimit)
    self.editButton({
        index          = resetTimersButtonIndex - 1,
        tooltip        = tooltip
    })
end

function increaseCurrentTime()
    local timer = timersList[currentTimerIndex]
    local playerName = getPlayerNameByTimerIndex(currentTimerIndex)
    if timer.currentSeconds > timerIncrement then
        timer.currentSeconds = timer.currentSeconds - timerIncrement
        chatText('Timer of ' .. playerName .. ' increased at ' .. formatSeconds(timerIncrement))
    else
        timer.currentSeconds = 0
        chatText('Timer of ' .. playerName .. ' already increased to maximum')
    end
end

function decreaseCurrentTime()
    local timer = timersList[currentTimerIndex]
    local playerName = getPlayerNameByTimerIndex(currentTimerIndex)
    timer.currentSeconds = timer.currentSeconds + timerIncrement
    chatText('Timer of ' .. playerName .. ' decreased at ' .. formatSeconds(timerIncrement))
end

function printAllTimerValues()
    chatText('[MultiTimer values at ' .. os.date('%Y-%m-%d %H:%M:%S') .. ':]', mainColor)
    for index, timer in pairs(timersList) do
        local playerName = getPlayerNameByTimerIndex(index)
        local seconds = formatSeconds(getTimerSecondsHumanReadeable(timer))
        local currentPlayer = currentTimerIndex == index
        if currentPlayer then
            chatText(string.format('%02d. %s: %s', index, playerName, seconds), turnsColors['Grey'])
        else
            chatText(string.format('%02d. %s: %s', index, playerName, seconds), turnsColors['White'])
        end
    end
end

function selectTimerColor()
    if isTurns == false then
        return
    end

    if color == nil then
        -- unknown
        return
    elseif color == undefinedTimerColorValue then
        -- undefined
        return
    elseif color == 'Grey' then
        -- spectator
        return
    end

    local nextSelectedColor = undefinedTimerColorValue
    if selectedTimerColor ~= nil then
        local colorsByIndex = {}
        local indexByColor = {}
        local lastColorIndex = 1
        colorsByIndex[lastColorIndex] = undefinedTimerColorValue
        indexByColor[undefinedTimerColorValue] = lastColorIndex
        for index, player in pairs(Player.getPlayers()) do
            if player.color ~= 'Grey' and player.color ~= 'Black' then
                lastColorIndex = lastColorIndex + 1
                colorsByIndex[lastColorIndex] = player.color
                indexByColor[player.color] = lastColorIndex
            end
        end
        -- TODO: sort colors according to turnsColors
        local nextSelectedIndex = 1
        local selectedIndex = indexByColor[selectedTimerColor]
        if selectedIndex ~= nil then
            if selectedIndex < lastColorIndex then
                nextSelectedIndex = selectedIndex + 1
            end
        end
        nextSelectedColor = colorsByIndex[nextSelectedIndex]
    end

    selectedTimerColor = nextSelectedColor

    updateSelectTimerColorView()
end

function updateSelectTimerColorView()
    if isTurns then
        if selectedTimerColor == undefinedTimerColorValue then
            self.editButton({
                index          = selectTimerColorButtonIndex - 1,
                color          = defaultButtonColor,
                label          = '[None]'
            })
            self.editButton({
                index          = bindTimerToColorButtonIndex - 1,
                color          = enabledColor,
                label          = 'Unbind'
            })
        elseif selectedTimerColor ~= nil then
            local buttonColor = turnsColors[selectedTimerColor]
            local playerName = getPlayerNameByColor(selectedTimerColor)
            if playerName == nil then
                playerName = '???'
            end
            if string.len(playerName) > maxPlayerNameLengthForSelect then
                playerName = string.sub(playerName, 1, maxPlayerNameLengthForSelect)
            end
            self.editButton({
                index          = selectTimerColorButtonIndex - 1,
                color          = buttonColor,
                label          = playerName
            })
            self.editButton({
                index          = bindTimerToColorButtonIndex - 1,
                color          = enabledColor,
                label          = 'Bind'
            })
        else
            self.editButton({
                index          = selectTimerColorButtonIndex - 1,
                color          = defaultButtonColor,
                label          = 'Select'
            })
            self.editButton({
                index          = bindTimerToColorButtonIndex - 1,
                color          = disabledColor,
                label          = 'Bind'
            })
        end
    else
        self.editButton({
            index          = selectTimerColorButtonIndex - 1,
            color          = disabledColor,
            label          = 'Select'
        })
        self.editButton({
            index          = bindTimerToColorButtonIndex - 1,
            color          = disabledColor,
            label          = 'Bind'
        })
    end
end

function bindTimerToColor()
    if isTurns == false then
        return
    end
    if selectedTimerColor == nil then
        return
    end

    if selectedTimerColor == undefinedTimerColorValue then
        timersList[currentTimerIndex].color = undefinedTimerColorValue
        local playerName = getPlayerNameByTimerIndex(currentTimerIndex)
        showText(playerName .. ': timer unbinded')
    else
        for index, timer in pairs(timersList) do
            if index ~= currentTimerIndex then
                if timer.color == selectedTimerColor then
                    timer.color = undefinedTimerColorValue
                    local playerName = getPlayerNameByTimerIndex(index)
                    showText(playerName .. ': timer unbinded')
                end
            end
        end
        timersList[currentTimerIndex].color = selectedTimerColor
        local playerName = getPlayerNameByTimerIndex(currentTimerIndex)
        showText(playerName .. ' (' .. selectedTimerColor .. '): timer ' .. currentTimerIndex .. ' binded ')
    end

    selectedTimerColor = nil

    updateCurrentTurnView()
    updateSelectTimerColorView()
end

function updateCurrentTurnView()
    if isTurns then
        local colorValue = defaultButtonColor
        local color = timersList[currentTimerIndex].color
        if color ~= undefinedTimerColorValue then
            colorValue = turnsColors[color]
        end
        if colorValue == nil then
            colorValue = defaultButtonColor
        end
        for i = 0, 3 do
            self.editButton({
                index          = firstCurrentTimerButtonIndex + i - 1,
                color          = colorValue
            })
        end
    else
        for i = 0, 3 do
            self.editButton({
                index          = firstCurrentTimerButtonIndex + i - 1,
                color          = defaultButtonColor
            })
        end
    end
end

function onPlayerTurnEnd(colorEnd, colorNext)
    if isTurns == false then
        return
    end
    if isActive == false then
        return
    end

    local needStop = false
    if colorNext == nil then
        -- unknown
        needStop = true
    elseif colorNext == undefinedTimerColorValue then
        -- undefined
        needStop = true
    elseif colorNext == 'Grey' then
        -- spectator
        needStop = true
    elseif colorNext == 'Black' then
        -- master
        needStop = true
    else
        for index, timer in pairs(timersList) do
            if timer.color == colorNext then
                needStop = false
                break
            else
                needStop = true
            end
        end
    end

    if needStop then
        pauseTimer()
        local playerName = getPlayerNameByTimerIndex(currentTimerIndex)
        if colorNext == nil then
            showText(playerName .. ': current timer paused because of no any timer binded to color [None]')
        else
            showText(playerName .. ': current timer paused because of no any timer binded to color ' .. colorNext)
        end
    end
end

function onPlayerTurnStart(startColor, prevColor)
    if isTurns == false then
        return
    end

    if startColor == nil then
        -- unknown
        return
    elseif startColor == undefinedTimerColorValue then
        -- undefined
        return
    elseif startColor == 'Grey' then
        -- spectator
        return
    elseif startColor == 'Black' then
        -- master
        return
    end
    local startIndex = nil
    for index, timer in pairs(timersList) do
        if timer.color == startColor then
            startIndex = index
            break
        end
    end
    if startIndex ~= nil then
        setCurrentTimer(startIndex)
    else
        local playerName = getPlayerNameByColor(startColor)
        showText('Timer binded to player with color ' .. startColor .. ' not found')
    end
end

function length(table)
    local count = 0
    for _ in pairs(table) do
        count = count + 1
    end
    return count
end

function clone (t) -- deep-copy a table
    if type(t) ~= 'table' then return t end
    local meta = getmetatable(t)
    local target = {}
    for k, v in pairs(t) do
        if type(v) == 'table' then
            target[k] = clone(v)
        else
            target[k] = v
        end
    end
    setmetatable(target, meta)
    return target
end

function createButtons()
    -- row 1
    self.createButton({
        click_function = 'toggleTimer',
        function_owner = self,
        label          = 'Start',
        position       = {0.3, 0.5, 0.35},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Start or pause current timer',
    })
    self.createButton({
        click_function = 'decreaseLimit',
        function_owner = self,
        label          = '--',
        position       = {0, 0.5, 0.35},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Decrease upper limit of all timers at ' .. timerIncrement .. ' seconds',
    })
    self.createButton({
        click_function = 'increaseLimit',
        function_owner = self,
        label          = '++',
        position       = {-0.3, 0.5, 0.35},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Increase upper limit of all timers at ' .. timerIncrement .. ' seconds',
    })

    -- row 2
    self.createButton({
        click_function = 'printAllTimerValues',
        function_owner = self,
        label          = 'Print',
        position       = {0.3, 0.5, 0.12},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Print values of all timers to game chat',
    })
    self.createButton({
        click_function = 'decreaseCurrentTime',
        function_owner = self,
        label          = '-',
        position       = {0, 0.5, 0.12},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Decrease current timer at ' .. timerIncrement .. ' seconds',
    })
    self.createButton({
        click_function = 'increaseCurrentTime',
        function_owner = self,
        label          = '+',
        position       = {-0.3, 0.5, 0.12},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Increase current timer at ' .. timerIncrement .. ' seconds',
    })

    -- row 3
    self.createButton({
        click_function = 'toggleTurns',
        function_owner = self,
        label          = 'Turns',
        position       = {0.3, 0.5, -0.12},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Enable or disable auto-binding of current timer to Turns and Colors',
    })
    self.createButton({
        click_function = 'selectTimerColor',
        function_owner = self,
        label          = 'Select',
        position       = {0, 0.5, -0.12},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = '\z
            Select the player to which you want to bind a current timer. \z
            To reset selected value disable and reenable turns with button Turn.\z
        ',
    })
    self.createButton({
        click_function = 'bindTimerToColor',
        function_owner = self,
        label          = 'Bind',
        position       = {-0.3, 0.5, -0.12},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Bind or unbind current timer to selected player',
    })

    -- row 4
    self.createButton({
        click_function = 'resetTimers',
        function_owner = self,
        label          = 'Reset',
        position       = {0.3, 0.5, -0.35},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Reset all timers to ' .. formatSeconds(timerLimit),
    })
    self.createButton({
        click_function = 'removeTimer',
        function_owner = self,
        label          = 'Remove',
        position       = {0, 0.5, -0.35},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Remove current timer',
    })
    self.createButton({
        click_function = 'addTimer',
        function_owner = self,
        label          = 'Add',
        position       = {-0.3, 0.5, -0.35},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Add new timer',
    })

    -- player buttons
    self.createButton({
        click_function = 'nextTimer',
        function_owner = self,
        label          = '00:00:00',
        position       = {0, 0, -0.5},
        rotation       = {90, 180, 0},
        -- scale          = -- Vector,
        width          = 450,
        height         = 300,
        font_size      = 100,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Next timer',
    })
    self.createButton({
        click_function = 'nextTimer',
        function_owner = self,
        label          = '00:00:00',
        position       = {0, 0, 0.5},
        rotation       = {-90, 0, 0},
        -- scale          = -- Vector,
        width          = 450,
        height         = 300,
        font_size      = 100,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Next timer',
    })
    self.createButton({
        click_function = 'nextTimer',
        function_owner = self,
        label          = '00:00:00',
        position       = {-0.5, 0, 0},
        rotation       = {0, 90, -90},
        -- scale          = -- Vector,
        width          = 450,
        height         = 300,
        font_size      = 100,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Next timer',
    })
    self.createButton({
        click_function = 'nextTimer',
        function_owner = self,
        label          = '00:00:00',
        position       = {0.5, 0, 0},
        rotation       = {0, -90, 90},
        -- scale          = -- Vector,
        width          = 450,
        height         = 300,
        font_size      = 100,
        color          = defaultButtonColor,
        -- font_color     = -- Color,
        tooltip        = 'Next timer',
    })
end
