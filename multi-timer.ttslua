-- MultiTimer - chessclock-like timer for two or more players

version = '1.1.0'
url = 'https://github.com/indvd00m/multi-timer'
isActive = false
timerLimit = 60 * 30
timerIncrement = 30
timersList = {}
timerTemplate = {
    currentSeconds = 0,
    lastSeconds = 0,
}
currentTimerIndex = 0

function onSave()
    local persistence = {
        isActive = isActive,
        timerLimit = timerLimit,
        timerIncrement = timerIncrement,
        timersList = timersList,
        timerTemplate = timerTemplate,
        currentTimerIndex = currentTimerIndex,
        clock = os.clock(),
    }
    local json = JSON.encode(persistence)
    return json
end

function onLoad(savedState)
    if savedState ~= nil and savedState ~= "" then
        local persistence = JSON.decode(savedState)
        isActive = persistence.isActive
        timerLimit = persistence.timerLimit
        timerIncrement = persistence.timerIncrement
        timersList = persistence.timersList
        timerTemplate = persistence.timerTemplate
        currentTimerIndex = persistence.currentTimerIndex
        local clockDiff = persistence.clock - os.clock()
        for index, timer in pairs(timersList) do
            timer.lastSeconds = timer.lastSeconds - clockDiff
            if timer.lastSeconds < 0 then
                timer.lastSeconds = 0
            end
        end
    else
        addTimer()
    end

    createButtons()

    self.setName('MultiTimer')
    self.setDescription('MultiTimer is a chessclock-like timer for two or more players. Version ' .. version .. '. \n\n' .. url)
    self.setColorTint({102/255, 102/255, 255/255})
end

function onUpdate()
    updateTimerSeconds(timersList[currentTimerIndex])
    updateView()
end

function updateTimerSeconds(timer)
    if isActive then
        local currentSecondsValue = os.clock()
        if timer.lastSeconds == 0 then
            timer.lastSeconds = currentSecondsValue
        end
        local diff = currentSecondsValue - timer.lastSeconds
        timer.lastSeconds = currentSecondsValue
        timer.currentSeconds = timer.currentSeconds + diff
    end
end

function updateView()
    local seconds = timerLimit - timersList[currentTimerIndex].currentSeconds
    local sign = ''
    if seconds < 0 then
        seconds = math.abs(seconds)
        sign = '-'
    end
    local timerString = 'Player ' .. currentTimerIndex .. '\n' .. sign .. formatSeconds(seconds)
    local firstButtonIndex = 10
    local prevString = self.getButtons()[firstButtonIndex].label
    if timerString ~= prevString then
        for i = 0, 3 do
            self.editButton({
                index          = firstButtonIndex + i - 1,
                label          = timerString
            })
        end
    end
end

function formatSeconds(seconds)
    local hours = math.floor(seconds / (60 * 60))
    local minutes = math.floor(seconds % (60 * 60) / 60)
    seconds = seconds % 60
    return string.format("%02d:%02d:%02d", hours, minutes, seconds)
end

function startTimer()
    if isActive == false then
        timersList[currentTimerIndex].lastSeconds = os.clock()
        isActive = true
        updateView()
        print('Timer started')
    end
end

function pauseTimer()
    if isActive == true then
        isActive = false
        updateView()
        print('Timers paused')
    end
end

function resetTimers()
    for index, timer in pairs(timersList) do
        resetTimer(timer)
    end

    updateView()
    print('Timer reseted')
end

function resetTimer(timer)
    timer.currentSeconds = 0
end

function nextTimer()
    currentTimerIndex = currentTimerIndex + 1
    local length = length(timersList)
    if currentTimerIndex > length or currentTimerIndex < 1 then
        currentTimerIndex = 1
    end
    if isActive then
        timersList[currentTimerIndex].lastSeconds = os.clock()
    end
    updateView()
    print('Current player: ' .. currentTimerIndex .. ' from ' .. length)
end

function addTimer()
    local nextIndex = length(timersList) + 1
    local newTimer = clone(timerTemplate);
    timersList[nextIndex] = newTimer
    if (nextIndex == 1) then
        currentTimerIndex = 1
    end
    print('Player added. Players count: ' .. nextIndex)
end

function removeTimer()
    if length(timersList) > 1 then
        local newTimersList = {}
        local nextIndex = 0
        for index, timer in pairs(timersList) do
            if index != currentTimerIndex then
                nextIndex = nextIndex + 1
                newTimersList[nextIndex] = timer
            end
        end
        timersList = newTimersList
        print('Player timer removed. Players count: ' .. nextIndex)
        currentTimerIndex = currentTimerIndex - 1
        nextTimer()
    else
        print('Removing of last player timer is deprecated')
    end
end

function increaseLimit()
    timerLimit = timerLimit + timerIncrement
    print('All timers increased at ' .. formatSeconds(timerIncrement))
end

function decreaseLimit()
    if timerLimit > timerIncrement then
        timerLimit = timerLimit - timerIncrement
        print('All timers decreased at ' .. formatSeconds(timerIncrement))
    else
        print('Timers already decreased until the end ')
    end
end

function increaseCurrentTime()
    local timer = timersList[currentTimerIndex]
    if timer.currentSeconds > timerIncrement then
        timer.currentSeconds = timer.currentSeconds - timerIncrement
        print('Timer of player ' .. currentTimerIndex .. ' increased at ' .. formatSeconds(timerIncrement))
    else
        timer.currentSeconds = 0
        print('Timer of player ' .. currentTimerIndex .. ' already increased to maximum')
    end
end

function decreaseCurrentTime()
    local timer = timersList[currentTimerIndex]
    -- if timer.currentSeconds + timerIncrement < timerLimit then
        timer.currentSeconds = timer.currentSeconds + timerIncrement
        print('Timer of player ' .. currentTimerIndex .. ' decreased at ' .. formatSeconds(timerIncrement))
    -- else
    --     timer.currentSeconds = timerLimit
    --     print('Timer of player ' .. currentTimerIndex .. ' already decreased to minimum')
    -- end
end

function length(table)
    local count = 0
    for _ in pairs(table) do
        count = count + 1
    end
    return count
end

function clone (t) -- deep-copy a table
    if type(t) ~= "table" then return t end
    local meta = getmetatable(t)
    local target = {}
    for k, v in pairs(t) do
        if type(v) == "table" then
            target[k] = clone(v)
        else
            target[k] = v
        end
    end
    setmetatable(target, meta)
    return target
end

function createButtons()
    self.createButton({
        click_function = 'startTimer',
        function_owner = self,
        label          = 'Start',
        position       = {0.3, 0.5, 0.3},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        -- color          = -- Color,
        -- font_color     = -- Color,
        tooltip        = 'Start current timer',
    })
    self.createButton({
        click_function = 'pauseTimer',
        function_owner = self,
        label          = 'Pause',
        position       = {0.3, 0.5, 0},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        -- color          = -- Color,
        -- font_color     = -- Color,
        tooltip        = 'Pause current timer',
    })
    self.createButton({
        click_function = 'resetTimers',
        function_owner = self,
        label          = 'Reset',
        position       = {0.3, 0.5, -0.3},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        -- color          = -- Color,
        -- font_color     = -- Color,
        tooltip        = 'Reset all timers',
    })
    self.createButton({
        click_function = 'decreaseLimit',
        function_owner = self,
        label          = '--',
        position       = {0, 0.5, 0.3},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        -- color          = -- Color,
        -- font_color     = -- Color,
        tooltip        = 'Decrease upper limit of all timers at ' .. timerIncrement .. ' seconds',
    })
    self.createButton({
        click_function = 'increaseLimit',
        function_owner = self,
        label          = '++',
        position       = {-0.3, 0.5, 0.3},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        -- color          = -- Color,
        -- font_color     = -- Color,
        tooltip        = 'Increase upper limit of all timers at ' .. timerIncrement .. ' seconds',
    })
    self.createButton({
        click_function = 'decreaseCurrentTime',
        function_owner = self,
        label          = '-',
        position       = {0, 0.5, 0},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        -- color          = -- Color,
        -- font_color     = -- Color,
        tooltip        = 'Decrease current timer at ' .. timerIncrement .. ' seconds',
    })
    self.createButton({
        click_function = 'increaseCurrentTime',
        function_owner = self,
        label          = '+',
        position       = {-0.3, 0.5, 0},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        -- color          = -- Color,
        -- font_color     = -- Color,
        tooltip        = 'Increase current timer at ' .. timerIncrement .. ' seconds',
    })
    self.createButton({
        click_function = 'removeTimer',
        function_owner = self,
        label          = 'Remove',
        position       = {0, 0.5, -0.3},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        -- color          = -- Color,
        -- font_color     = -- Color,
        tooltip        = 'Remove current timer',
    })
    self.createButton({
        click_function = 'addTimer',
        function_owner = self,
        label          = 'Add',
        position       = {-0.3, 0.5, -0.3},
        rotation       = {0, 180, 0},
        -- scale          = -- Vector,
        width          = 150,
        height         = 100,
        font_size      = 40,
        -- color          = -- Color,
        -- font_color     = -- Color,
        tooltip        = 'Add new timer',
    })

    -- player buttons
    self.createButton({
        click_function = 'nextTimer',
        function_owner = self,
        label          = '00:00:00',
        position       = {0, 0, -0.5},
        rotation       = {90, 180, 0},
        -- scale          = -- Vector,
        width          = 450,
        height         = 300,
        font_size      = 100,
        -- color          = -- Color,
        -- font_color     = -- Color,
        tooltip        = 'Next player',
    })
    self.createButton({
        click_function = 'nextTimer',
        function_owner = self,
        label          = '00:00:00',
        position       = {0, 0, 0.5},
        rotation       = {-90, 0, 0},
        -- scale          = -- Vector,
        width          = 450,
        height         = 300,
        font_size      = 100,
        -- color          = -- Color,
        -- font_color     = -- Color,
        tooltip        = 'Next player',
    })
    self.createButton({
        click_function = 'nextTimer',
        function_owner = self,
        label          = '00:00:00',
        position       = {-0.5, 0, 0},
        rotation       = {0, 90, -90},
        -- scale          = -- Vector,
        width          = 450,
        height         = 300,
        font_size      = 100,
        -- color          = -- Color,
        -- font_color     = -- Color,
        tooltip        = 'Next player',
    })
    self.createButton({
        click_function = 'nextTimer',
        function_owner = self,
        label          = '00:00:00',
        position       = {0.5, 0, 0},
        rotation       = {0, -90, 90},
        -- scale          = -- Vector,
        width          = 450,
        height         = 300,
        font_size      = 100,
        -- color          = -- Color,
        -- font_color     = -- Color,
        tooltip        = 'Next player',
    })
end
